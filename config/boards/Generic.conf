# Fake borad configuration used for building generic image
SUPPORTED_LINUX=("mainline")
SUPPORTED_LINUX_DESC=("Linux Mainline")

case "$LINUX" in
	mainline)
		KERNEL_COMPILER="aarch64-none-linux-gnu-"
		KERNEL_COMPILER_PATH="$TOOLCHAINS/gcc-arm-aarch64-none-linux-gnu/bin"
		LINUX_DTB=""
		LINUX_DIR="$BUILD/linux-mainline-*"
		LINUX_GIT_BRANCH="master"
		LINUX_DEFCONFIG="${LINUX_DEFCONFIG:-defconfig}"
		SERIALCON=""
		BOOT_SCRIPT_BOARD=""
		GPU_VER=""
		GPU_PLATFORM=""
		MODESETTING_CONF=""
		;;
esac

BOOT_SCRIPT_VENDOR=""

BOOT_INI=""
BOOT_ENV_FILE=""
BOOT_ENV_FILE_EXT=""

CPUMIN=""
CPUMAX=""
GOVERNOR=""

####
WIFI_MODEL=""
GPU_MODEL=""

##############################

## Pack image
pack_image_platform_raw() {

    # ABOUT

    # this simple raw image suitable for dd write to eMMC
    # same for Krescue usage
    # simple alternative for rockchip image

    # USAGE
    #
    # INSTALL_TYPE_RAW=yes make
    #
    # INSTALL_TYPE_RAW=yes COMPRESS_IMAGE=yes make

    [ "$INSTALL_TYPE" != "EMMC" ] && return
    [ "$INSTALL_TYPE_RAW" != "yes" ] && return

    info_msg "Simple raw image suitable for dd write -> $IMAGE_FILE_NAME"

    #####################################
    BS=512
    IMAGE_SIZE=$((8*1024*1024*1024))
    IMAGE_BLOCKS=$((IMAGE_SIZE/BS))
    ## offset by BS blocks ##############
    LOADER_OFFSET=64
    UBOOT_OFFSET=16384
    TRUST_OFFSET=24576
    RESOURCE_OFFSET=40960
    ROOTFS_OFFSET=262144

    IMG="$BUILD_IMAGES/$IMAGE_FILE_NAME"

    RK_PARTS="## PARTS_BEGIN linux
    label: gpt
    label-id: 2A583E58-486A-4BD4-ACE4-8D5454E97F5C
    device: /dev/mmcblk2
    unit: sectors
    first-lba: 34
    last-lba: $((IMAGE_BLOCKS-34))

    /dev/mmcblk2p1 : start=       $LOADER_OFFSET,   size=        8064, type=43784A32-A03D-4ADE-92C6-EDE64FF9B794, uuid=6115F139-4F47-4BAF-8D23-B6957EAEE4B3, name="loader1"
    /dev/mmcblk2p2 : start=       $UBOOT_OFFSET,    size=        8192, type=000B305F-484A-4582-9090-4AD0099D47BD, uuid=A83FBA16-D354-45C5-8B44-3EC50832D363, name="uboot"
    /dev/mmcblk2p3 : start=       $TRUST_OFFSET,    size=        8192, type=24EEB649-277F-4C11-FFEB-D9F20027A83B, uuid=500E2214-B72D-4CC3-D7C1-8419260130F5, name="trust"
    /dev/mmcblk2p4 : start=       32768,            size=        8192, type=1CAC805F-726A-495A-FD35-821355A6E7E8, uuid=E099DA71-5450-44EA-AA9F-1B771C582805, name="misc"
    /dev/mmcblk2p5 : start=       $RESOURCE_OFFSET, size=       32768, type=2BFEE623-D83C-426A-AB80-21732C9BB7D3, uuid=AF12D156-5D5B-4EE3-B415-8D492CA12EA9, name="resource"
    /dev/mmcblk2p6 : start=       73728,            size=      188416, type=B2AF085D-A675-48C6-C437-F6D557FF4744, uuid=8EB9EE49-E963-4BB6-FD75-F30618DF9DCD, name="kernel", attrs="LegacyBIOSBootable"
    /dev/mmcblk2p7 : start=       $ROOTFS_OFFSET,                      type=2D9E7B61-1B31-47E7-EE0D-8CEC26D42EF6, uuid=614E0000-0000-4B53-8000-1D28000054A9, name="rootfs", attrs="LegacyBIOSBootable"
    "

    #CMD(){
    #    echo "# $@">&2
    #    $@
    #}

    DDN() {
	dd status=none conv=sparse,fsync,notrunc if="$1" of="$2" $3 $4 $5 $6
    }

    DD() {
	dd status=progress conv=sparse,fsync,notrunc if="$1" of="$2" $3 $4 $5 $6
    }

    rm -rf "$IMG"
    DDN /dev/zero "$IMG" seek=$((IMAGE_BLOCKS-1)) count=1
    #truncate -s$IMAGE_SIZE "$IMG"
    echo "$RK_PARTS" | sfdisk -q "$IMG" || {
	error_msg "sfdisk fail"
	return 1
    }
    DDN "$UBOOT_IMAGE_DIR"/idbloader.img "$IMG" seek=$LOADER_OFFSET
    DDN "$UBOOT_IMAGE_DIR"/uboot.img     "$IMG" seek=$UBOOT_OFFSET
    DDN "$UBOOT_IMAGE_DIR"/trust.img     "$IMG" seek=$TRUST_OFFSET
    DDN "$BUILD_IMAGES"/logo.img         "$IMG" seek=$RESOURCE_OFFSET
    DD  "$BUILD_IMAGES"/rootfs.img       "$IMG" seek=$ROOTFS_OFFSET

    ROOTFS_SIZE=$(stat -c%s "$BUILD_IMAGES"/rootfs.img)
    # minimize image
    truncate -s$((ROOTFS_OFFSET*BS+ROOTFS_SIZE)) "$IMG"

}

## Pack image
pack_image_platform() {

    cd ${ROOT}

    info_msg "Image install type: $INSTALL_TYPE"
	if [ "$PACK_UBOOT_IMAGE" == "yes" ]; then
		IMAGE_FILE_NAME="${KHADAS_BOARD}_Uboot_SD_${IMAGE_VERSION}.img"
		info_msg "Create Uboot SD image..."
		dd if=/dev/zero of=${BUILD_IMAGES}/${IMAGE_FILE_NAME} bs=1M count=0 seek=16 > /dev/null 2>&1
	fi

	echo ""
    info_msg "IMAGE: ${GREEN}$BUILD_IMAGES/$IMAGE_FILE_NAME ${ENDCOLOR} is ready!"
}

## tweaks for platform
tweaks_platform() {
	echo "#Serial console allow root" >> $ROOTFS_TEMP/etc/securetty
}

# Build deb packages for platform
build_deb_packages_platform() {
	:
}

# Install deb packages for platform
install_deb_packages_platform() {
	:
}
